/* 
BARBIER Adrien - FAJERMAN Yohan - L1 INT 1
C PROJECT - The Rubik's Cube - key_algorithms.algo
The file goes along with our project report: it contains several key algorithms which are very useful for our program.
You'll find one function per each category, as well as the main algorithm.
The information about the role of each function are available on our report.
*/


enum T_SIDE {UP,LEFT,FRONT,RIGHT,BACK,DOWN}
FACE <-- 6
SIZE <-- 3
// Array counting begin at 1 in algorithmic language



Function side_to_index(side: string): enum T_SIDE // ENUM TYPE FUNCTION
Copied parameters: side
begin
    if (side = "FRONT") then
        return FRONT
    else if (side = "BACK"):
        return BACK
    else if (side = "UP")
        return UP
    else if (side = "DOWN")
        return DOWN
    else if (side = "RIGHT")
        return RIGHT
    else if (side = "LEFT")
        return LEFT
    end if
end


Function init_rubiks(rubiks[][][]: array of characters) // CUBE REPRESENTATION FUNCTION
Modified parameters: rubiks
Local Variables: i,j,k: integer
begin
    for i <-- 1 to FACE do 
        switch(i)
            case 0: 
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'W'
                    end for
                end for
                break

            case 1:
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'O'
                    end for
                end for
                break

            case 2:
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'G'
                    end for
                end for
                break
            
            case 3:
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'R'
                    end for
                end for
                break
            
            case 4:
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'B'
                    end for
                end for
                break
            
            case 5: 
                for j <-- 0 to SIZE do
                    for k <-- 0 to SIZE do
                        rubiks[i][j][k] <-- 'Y'
                    end for
                end for
                break
            
            default:
                break
        end switch
    end for
end



Function fill_all_cube(rubiks[][][]: array of characters) // FILLING THE CUBE FUNCTION
Modified parameters: rubiks
Local Variables:
 i,j,k: integer 
 cpt[10]: array of integer // This array is composed of 6 integers, of value 8, corresponding the counter of each color of the cube.
begin
    blank_rubiks(rubiks)
    for i <-- 1 to FACE do
        Write("Face: ", index_to_side(i), "\n")
        for j <-- 1 to SIZE do 
            for k <-- 1 to SIZE do
                Write("Line ", j, "- Cell ", k, ": ")
                Read(rubiks[i][j][k])
                switch_color_input(rubiks[i][j][k], cpt)
            end for
        Write("\n")
        end for
        Write("\nCOLOR CELLS REMAINING: \n")
        Write("RED: ", cpt[1], "-- BLUE: ", cpt[2], "-- GREEN: ", cpt[3], "\n")
        Write("YELLOW: ", cpt[4], "-- ORANGE: ", cpt[5], "WHITE: ", cpt[6], "\n\n")
    end for
end



Function FRONT_clockwise(rubiks[][][]: array of characters, type: integer) // MOVEMENT FUNCTION
Copied parameters: type
Modified parameters: rubiks
Local Variables: 
 i,cpt: integer
 save1[3], save2[3]: array of characters
begin
    for cpt <-- 1 to type do
        for i <-- 1 to SIZE do
            save1[i] <-- rubiks[side_to_index("FRONT")][1][i]
            save2[i] <-- rubiks[side_to_index("FRONT")][i][3]
        end for

        for i <-- 1 to SIZE do
            rubiks[side_to_index("FRONT")][1][i]=rubiks[side_to_index("FRONT")][3-i][1]
            rubiks[side_to_index("FRONT")][3-i][1]=rubiks[side_to_index("FRONT")][3][3-i]
            rubiks[side_to_index("FRONT")][3][3-i]=save2[i]
            rubiks[side_to_index("FRONT")][i][3]=save1[i]
        end for

        for i <-- 1 to SIZE do
            save1[i]=rubiks[side_to_index("UP")][3][i]
            rubiks[side_to_index("UP")][3][i]=rubiks[side_to_index("LEFT")][3-i][3]
            rubiks[side_to_index("LEFT")][3-i][3]=rubiks[side_to_index("DOWN")][1][3-i]
            rubiks[side_to_index("DOWN")][1][3-i]=rubiks[side_to_index("RIGHT")][i][1]
            rubiks[side_to_index("RIGHT")][i][1]=save1[i]
        end for
    end for
end
        


Function horizontal_rotation(rubiks[][][]: array of characters) // MOVEMENT FUNCTION
Modified parameters: rubiks
Local Variables: save, i, j: integer
begin
    for i <-- 1 to 4 do
        for j <-- 1 to 4 do
            save = rubiks[side_to_index("LEFT")][i][j]
            rubiks[side_to_index("LEFT")][i][j]=rubiks[side_to_index("RIGHT")][i][j]
            rubiks[side_to_index("RIGHT")][i][j]=save
        end for
    end for

    for i <-- 1 to 4 do
        for j <-- 1 to 4 do
            save = rubiks[side_to_index("FRONT")][i][j]
            rubiks[side_to_index("FRONT")][i][j]=rubiks[side_to_index("BACK")][i][j]
            rubiks[side_to_index("BACK")][i][j]=save
        end for
    end for

    for i <-- 1 to 3 do
        save=rubiks[side_to_index("UP")][1][i]
        rubiks[side_to_index("UP")][1][i]=rubiks[side_to_index("UP")][3][3-i]
        rubiks[side_to_index("UP")][3][3-i]=save
        save = rubiks[side_to_index("UP")][i][3]
        rubiks[side_to_index("UP")][i][3] = rubiks[side_to_index("UP")][3-i][1]
        rubiks[side_to_index("UP")][3-i][1] = save
    end for

    for i <-- 1 to 3 do
        save=rubiks[side_to_index("DOWN")][1][i]
        rubiks[side_to_index("DOWN")][1][i]=rubiks[side_to_index("DOWN")][3][3-i]
        rubiks[side_to_index("DOWN")][3][3-i]=save
        save = rubiks[side_to_index("DOWN")][i][3]
        rubiks[side_to_index("DOWN")][i][3] = rubiks[side_to_index("DOWN")][3-i][1]
        rubiks[side_to_index("DOWN")][3-i][1] = save
    end for
end



Function first_crown(rubiks[][][]: array of characters) // RESOLUTION FUNCTION
Modified parameters: rubiks
Local Variables:
 i: integer
 check[4]: array of integers // this array is composed of 4 integers, each of value 0.
begin
    do
        for i <-- 1 to 5 do
            if (corner_check(rubiks)=1) then
                check[i] <-- 1
            else
                if (corner_case1(rubiks)=0) then
                    DOWN_clockwise(rubiks, 1)
                else
                    while corner_check(rubiks)=0 do
                        RIGHT_anticlockwise(rubiks, 1)
                        DOWN_anticlockwise(rubiks, 1)
                        RIGHT_clockwise(rubiks, 1
                        RIGHT_anticlockwise(rubiks, 1);
                    end while
                    check[i] <-- 1
                end if

                if (corner_case2(rubiks)=0) then
                    RIGHT_anticlockwise(rubiks, 1)
                    DOWN_clockwise(rubiks, 1)
                    RIGHT_clockwise(rubiks, 1)
                end if
            end if
            half_horizontal_rotation(rubiks)
        end for
    while(check[0]=0 or check[1]=0 or check[2]=0 or check[3]=0)
end



Algorithm main // MAIN PROGRAM
Var:
 op, op_move_cube, op_clock, op_side, type, step: integer
 init, solved, cont: boolean
 rubiks[][][]: array of characters
begin
    init <-- false
    solved <-- false
    cont <-- true

    create_rubiks()
    Write("\nWelcome to the RUBIK'S CUBE SIMULATOR ! \n")
    Write("ATTENTION! Be sure to INITIALIZE your cube before performing any movements!\n")

    do
        do
            Write("\nHere are your options: ")
            Write("\n1: BLANK -- 2: INITIALIZE -- 3: SCRAMBLE -- 4: FILL\n")
            Write("5: MOVE CUBE -- 6: MOVE SIDE -- 7: SOLVE -- 0: QUIT\n")
            Write("Action: ")
            Read(op)
        while(op<0 or op>6)
        Write("\n")

        switch(op)
            case 1:
                Write("Here is your blank rubik's cube: \n")
                blank_rubiks(rubiks)
                display_rubiks(rubiks)
                break

            case 2:
                Write("Here is a normal rubik's cube: \n")
                init_rubiks(rubiks)
                init <-- true
                display_rubiks(rubiks)
                break

            case 3:
                if init=true then
                    scramble_rubiks(rubiks)
                    Write("Here is your scrambled cube: \n")
                    display_rubiks(rubiks)
                else
                    Write("Please INITIALIZE the Cube before performing any movement !")
                end if
                break

            case 4:
                if (init=true) then
                    Write("PAY ATTENTION !!! there are several conditions to follow in order to fill the cube correctly: \n")
                    Write("\t 1) The center cell of the cube must always be of the same color:\n")
                    Write("\t\t UP=WHITE, LEFT=ORANGE, FRONT=GREEN,\n")
                    Write("\t\t RIGHT=RED, BACK=BLUE, DOWN=YELLOW.\n")
                    Write("\t 2) Two cells adjacent to the center cell must be of different colors.\n")
                    Write("\t 3) Two adjacent corners must be of different colors.\n")
                    Write("\n Also, please fill the cube with the following CAPITAL letters:\n")
                    Write("\t R for RED, B for BLUE, G for GREEN,")
                    Write("\t Y for YELLOW, O for ORANGE or W for WHITE.")

                    Write("\n\n Now, you have the choice between three filling methods:\n")
                    Write("\t 1) filling entirely a blank cube,\n")
                    Write("\t 2) filling an entire specific face,\n")
                    Write("\t 3) filling an specific cell.\n")
                    fill_menu(rubiks)
                else
                    Write("Please INITIALIZE the Cube before performing any movement !")
                end if
                break
            
            case 5: 
                if (init=true) then
                    do
                        Write("\nHORIZONTAL, HALF HORIZONTAL or VERTICAL Rotation ? Press 1, 2 or 3: ")
                        Read(op_move_cube)
                    while (op_move_cube < 1 or op_move_cube > 3)
                    Write("\n")

                    switch(op_move_cube)
                        case 1:
                            horizontal_rotation(rubiks)
                            break
                        case 2:
                            half_horizontal_rotation(rubiks)
                            break
                        case 3:
                            vertical_rotation(rubiks)
                            break
                        default:
                            break

                    display_rubiks(rubiks)
                else
                    Write("Please INITIALIZE the Cube before performing any movement !")
                end if
                break
            
            case 6:
            if (init=true) then
                do
                    do
                        Write("\nCLOCKWISE or ANTICLOCKWISE rotation ? Press 1 or 2: ")
                        Read(op_clock)
                    while (op_clock < 1 or op_clock > 2)
                    Write("\n")

                    do
                        Write("\nHow many rotations ? 1 for a quarter turn, 2 for a half turn, or 3 for three quarter turns: ")
                        Write("%d", &type);
                    while (type < 1 or type > 3)
                    Write("\n")

                    Write("1: UP -- 2: LEFT -- 3: FRONT\n")
                    Write("4: RIGHT -- 5: BACK -- 6: DOWN\n")
                    do
                        Write("Enter the side on which you want to apply the rotation: ")
                        Read(op_side);
                    while (op_side < 1 or op_side > 6)
                    Write("\n")

                    switch (op_clock)
                    case 1:
                        move_side_clockwise(rubiks, op_side, type)
                        break
                    case 2:
                        move_side_anticlockwise(rubiks, op_side, type)
                        break
                    default:
                        break
                    
                    display_rubiks(rubiks)  
                    do
                        Write("Continue to perform some rotations? or do something else? Press 1 or 2: ")
                        Read(cont)
                        if (cont=1) then
                            cont <-- true
                        else
                            cont <-- false
                        end if
                    while (cont < 1 or cont > 2)

                    if (cont = false) then
                        break
                    end if
                while(cont=true)
                
                break

            case 7:
                if (init=true) then
                    do
                        do
                           Write("\nWhich step ?")
                            Write("\n1: PERFECT CROSS -- 2: 1st CROWN -- 3: 2nd CROWN: ")
                            Read(step)
                        while (step < 1 or step > 3)
                        Write("\n")
                        
                        solving_process(rubiks, step)
                        display_rubiks(rubiks)
                        do
                            Write("Continue to solve? or try it by yourself? press 1 or 2: ")
                            Read(cont)
                             if (cont=1) then
                                cont <-- true
                            else
                                cont <-- false
                            end if
                        while (cont < 1 or cont > 2)
                        if (cont = false)
                            break
                    while (cont = true or solved = false)
                else
                    Write("\nPlease INITIALIZE the Cube before solving it !\n")
                end if
                break

            case 0:
                Write("Thank you for using the simulator. Have a nice day !")
                break

            default:
                Write("Wrong Choice, please try again. \n")
                break
    while(op =/= 0)
end
                 